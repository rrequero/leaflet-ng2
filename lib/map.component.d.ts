/// <reference types="leaflet" />
import { AfterViewInit, ElementRef, EventEmitter } from '@angular/core';
import { Map, LatLngBoundsExpression, LatLngBounds, LayersControlEvent, LayerEvent, Event, ResizeEvent, PopupEvent, TooltipEvent, MouseEvent, KeyboardEvent, ZoomAnimEvent } from 'leaflet';
export declare class MapComponent extends Map implements AfterViewInit {
    zoomChange: EventEmitter<number>;
    latChange: EventEmitter<number>;
    lngChange: EventEmitter<number>;
    minZoomChange: EventEmitter<number>;
    maxZoomChange: EventEmitter<number>;
    maxBoundsChange: EventEmitter<LatLngBounds>;
    baselayerchangeEvent: EventEmitter<LayersControlEvent>;
    overlayaddEvent: EventEmitter<LayersControlEvent>;
    overlayremoveEvent: EventEmitter<LayersControlEvent>;
    layeraddEvent: EventEmitter<LayerEvent>;
    layerremoveEvent: EventEmitter<LayerEvent>;
    zoomlevelschangeEvent: EventEmitter<Event>;
    resizeEvent: EventEmitter<ResizeEvent>;
    unloadEvent: EventEmitter<Event>;
    viewresetEvent: EventEmitter<Event>;
    loadEvent: EventEmitter<Event>;
    zoomstartEvent: EventEmitter<Event>;
    movestartEvent: EventEmitter<Event>;
    zoomEvent: EventEmitter<Event>;
    moveEvent: EventEmitter<Event>;
    zoomendEvent: EventEmitter<Event>;
    moveendEvent: EventEmitter<Event>;
    popupopenEvent: EventEmitter<PopupEvent>;
    popupcloseEvent: EventEmitter<PopupEvent>;
    autopanstartEvent: EventEmitter<Event>;
    tooltipopenEvent: EventEmitter<TooltipEvent>;
    tooltipcloseEvent: EventEmitter<TooltipEvent>;
    clickEvent: EventEmitter<MouseEvent>;
    dblclickEvent: EventEmitter<MouseEvent>;
    mousedownEvent: EventEmitter<MouseEvent>;
    mouseupEvent: EventEmitter<MouseEvent>;
    mouseoverEvent: EventEmitter<MouseEvent>;
    mouseoutEvent: EventEmitter<MouseEvent>;
    mousemoveEvent: EventEmitter<MouseEvent>;
    contextmenuEvent: EventEmitter<MouseEvent>;
    keypressEvent: EventEmitter<KeyboardEvent>;
    preclickEvent: EventEmitter<MouseEvent>;
    zoomanimEvent: EventEmitter<ZoomAnimEvent>;
    protected domRoot: HTMLElement;
    protected mapDomRoot: HTMLElement;
    private moveTimeout;
    private isZooming;
    constructor(elementRef: ElementRef);
    ngAfterViewInit(): void;
    zoom: number;
    lat: number;
    lng: number;
    setMinZoom(val: number): this;
    minZoom: number;
    setMaxZoom(val: number): this;
    maxZoom: number;
    setMaxBounds(bounds: LatLngBoundsExpression): this;
    maxBounds: LatLngBounds;
    closePopupOnClick: boolean;
    zoomSnap: number;
    zoomDelta: number;
    trackResize: boolean;
    boxZoomEnabled: boolean;
    doubleClickZoomEnabled: boolean;
    draggingEnabled: boolean;
    fadeAnimation: boolean;
    markerZoomAnimation: boolean;
    transform3DLimit: number;
    zoomAnimation: boolean;
    zoomAnimationThreshold: number;
    inertia: boolean;
    inertiaDeceleration: number;
    inertiaMaxSpeed: number;
    easeLinearity: number;
    worldCopyJump: boolean;
    maxBoundsViscosity: number;
    keyboardEnabled: boolean;
    keyboardPanDelta: number;
    scrollWheelZoomEnabled: boolean;
    wheelDebounceTime: number;
    wheelPxPerZoomLevel: number;
    tapEnabled: boolean;
    tapTolerance: number;
    bounceAtZoomLimits: boolean;
    touchZoomEnabled: boolean;
}
