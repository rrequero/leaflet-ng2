/// <reference types="leaflet" />
/// <reference types="geojson" />
import { EventEmitter, OnDestroy, AfterViewInit } from '@angular/core';
import { Circle, CircleMarkerOptions, Event, PopupEvent, TooltipEvent, PathOptions, FillRule, LineCapShape, LineJoinShape, LatLng, LatLngTuple, LatLngLiteral } from 'leaflet';
import { MapComponent } from './map.component';
import { GenericGeoJSONFeature } from '@yaga/generic-geojson';
import { PopupDirective } from './popup.directive';
import { TooltipDirective } from './tooltip.directive';
export declare class CircleDirective<T> extends Circle implements OnDestroy, AfterViewInit {
    displayChange: EventEmitter<boolean>;
    strokeChange: EventEmitter<boolean>;
    colorChange: EventEmitter<string>;
    weightChange: EventEmitter<number>;
    opacityChange: EventEmitter<number>;
    lineCapChange: EventEmitter<string>;
    lineJoinChange: EventEmitter<string>;
    dashArrayChange: EventEmitter<string>;
    dashOffsetChange: EventEmitter<string>;
    fillChange: EventEmitter<boolean>;
    fillColorChange: EventEmitter<string>;
    fillOpacityChange: EventEmitter<number>;
    fillRuleChange: EventEmitter<string>;
    classNameChange: EventEmitter<string>;
    styleChange: EventEmitter<PathOptions>;
    positionChange: EventEmitter<LatLng>;
    latChange: EventEmitter<number>;
    lngChange: EventEmitter<number>;
    radiusChange: EventEmitter<number>;
    geoJSONChange: EventEmitter<GenericGeoJSONFeature<GeoJSON.Point, T>>;
    addEvent: EventEmitter<Event>;
    removeEvent: EventEmitter<Event>;
    popupopenEvent: EventEmitter<PopupEvent>;
    popupcloseEvent: EventEmitter<PopupEvent>;
    tooltipopenEvent: EventEmitter<TooltipEvent>;
    tooltipcloseEvent: EventEmitter<TooltipEvent>;
    clickEvent: EventEmitter<MouseEvent>;
    dbclickEvent: EventEmitter<MouseEvent>;
    mousedownEvent: EventEmitter<MouseEvent>;
    mouseoverEvent: EventEmitter<MouseEvent>;
    mouseoutEvent: EventEmitter<MouseEvent>;
    contextmenuEvent: EventEmitter<MouseEvent>;
    popupDirective: PopupDirective;
    tooltipDirective: TooltipDirective;
    private initialized;
    constructor(mapComponent: MapComponent);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    setLatLng(val: LatLng | LatLngTuple | LatLngLiteral): this;
    position: LatLng | LatLngTuple | LatLngLiteral;
    lat: number;
    lng: number;
    setRadius(val: number): this;
    radius: number;
    geoJSON: GenericGeoJSONFeature<GeoJSON.Point, T>;
    setStyle(style: PathOptions): this;
    opacity: number;
    stroke: boolean;
    color: string;
    weight: number;
    lineCap: LineCapShape;
    lineJoin: LineJoinShape;
    dashArray: string;
    dashOffset: string;
    fill: boolean;
    fillColor: string;
    fillOpacity: number;
    fillRule: FillRule;
    className: string;
    style: CircleMarkerOptions;
    display: boolean;
    interactive: boolean;
    properties: T;
}
